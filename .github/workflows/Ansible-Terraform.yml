name: Run Ansible-Terraform playbook

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    

jobs:
  ansible_playbook_job:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        
    env:
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}

    name: Execute  Playbook
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Open Ops repository Directory
        working-directory: ./iac-github
        run: |
          ls -la

      - name: Run Ansible Playbook
        working-directory: ./iac-github
        run: ansible-playbook playbook.yaml


      - name: "list files"
        run: ls -ltrh /tmp/generated_tf

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check



      - name: init Terraform
        working-directory: /tmp/generated_tf
        run: terraform init
        env:
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
          
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform plan
        working-directory: /tmp/generated_tf
        id: plan
#         if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        env:
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
#         continue-on-error: true
        
#       - name: Update Pull Request
#         uses: actions/github-script@0.9.0
#         if: github.event_name == 'pull_request'
#         env:
#           PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

#             <details><summary>Show Plan</summary>

#             \`\`\`\n
#             ${process.env.PLAN}
#             \`\`\`

#             </details>

#             *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })


          
          
      - name: Terraform Apply
        working-directory: /tmp/generated_tf
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
